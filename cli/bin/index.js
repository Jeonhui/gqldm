#!/usr/bin/env node
import{Command as h}from"commander";import{Introspector as m}from"@gqldm/schema-builder";import{exit as p}from"node:process";async function i(e){let o=new m(e);console.log("\u{1F3C1} Introspecting database schema...");try{let t=await o.introspect();console.log(t)}catch(t){console.error("\u274C Error during introspection:",t),p(1)}console.log("\u2705 Introspection completed successfully.")}import{readFile as r}from"node:fs/promises";import{SchemaBuilder as l}from"@gqldm/schema-builder";import{exit as d}from"node:process";import{writeFile as f}from"node:fs/promises";import{printSchema as g}from"graphql";async function c(e){let o={introspectorDatabaseConfig:e};console.log("\u{1F3C1} Build database schema to graphql...");let n=await new l(o).buildSchema();n||(console.error("\u274C Failed to build schema."),d(1));let s=g(n);await f("./schema.graphql",s,"utf-8"),console.log("\u2705 build completed successfully. Saved to schema.graphql")}var a=new h;a.name("GQLDM").description("GQLDM(GraphQL Database Middleware) CLI");a.command("init").description("Initialize something").action(()=>{console.log("Init command executed")});a.command("introspect").description("Introspect the database schema").option("-c, --config <path>","path to database config.json file","./config.json").action(async e=>{try{let o=await r(e.config,"utf-8"),t=JSON.parse(o);await i(t)}catch(o){console.error("Failed to read config.json file:",o)}});a.command("build-schema").description("Build GraphQL schema from database").option("-c, --config <path>","path to database config.json file","./config.json").action(async e=>{let o=await r(e.config,"utf-8"),t=JSON.parse(o);await c(t)});a.parse();
