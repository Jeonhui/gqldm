#!/usr/bin/env node
import{Command as w}from"commander";import{Introspector as l}from"@gqldm/schema-builder";import{exit as u}from"node:process";import{writeFile as f}from"node:fs/promises";async function n(o,a="./output.graphql"){let e=new l(o);console.log("\u{1F3C1} Introspecting database schema...");try{let t=await e.introspect(),r=JSON.stringify({[o.database||"database"]:t},null,2);await f(a,r,"utf-8")}catch(t){console.error("\u274C Error during introspection:",t),u(1)}console.log("\u2705 Introspection completed successfully.")}import{readFile as s}from"node:fs/promises";import{SchemaBuilder as h}from"@gqldm/schema-builder";import{exit as g}from"node:process";import{writeFile as d}from"node:fs/promises";import{printSchema as b}from"graphql";async function c(o,a="./schema.graphql"){let e={introspectorDatabaseConfig:o};console.log("\u{1F3C1} Build database schema to graphql...");let r=await new h(e).buildSchema();r||(console.error("\u274C Failed to build schema."),g(1));let m=b(r);await d(a,m,"utf-8"),console.log(`\u2705 build completed successfully. Saved to ${a}`)}import{exit as p}from"node:process";var i=new w;i.name("GQLDM").description("GQLDM(GraphQL Database Middleware) CLI");i.command("introspect").description("Introspect the database schema").option("-c, --config <path>","path to database config file (config.json)","./config.json").option("-o, --output <path>","path to output graphql file (output.graphql)","./output.graphql").action(async o=>{let a=await s(o.config,"utf-8").then(t=>JSON.parse(t)).catch(t=>{console.error(t),p(1)}),e=o.output;await n(a,e)});i.command("build-schema").description("Build GraphQL schema from database").option("-c, --config <path>","path to database config file (config.json)","./config.json").option("-o, --output <path>","path to output graphql file (output.graphql)","./output.graphql").action(async o=>{let a=await s(o.config,"utf-8").then(t=>JSON.parse(t)).catch(t=>{console.error(t),p(1)}),e=o.output;await c(a,e)});i.parse();
